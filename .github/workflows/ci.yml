name: CI

on:
  push:
    branches:
      - '**'
  pull_request:

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: btcuser
          POSTGRES_PASSWORD: btcpass
          POSTGRES_DB: btcdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U btcuser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    permissions:
      contents: read
      packages: write
    env:
      DB_HOST: localhost
      DB_PORT: '5432'
      DB_USER: btcuser
      DB_PASS: btcpass
      DB_NAME: btcdb
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install --no-install-recommends postgresql-client -y

      - name: Install dependencies
        run: npm install

      - name: Wait for Postgres
        run: |
          until pg_isready --host "$DB_HOST" --port "$DB_PORT" --username "$DB_USER"; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Run migrations
        run: npm run migrate

      - name: Test
        run: npm run test

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository }}"
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          docker build -t "$IMAGE_NAME:latest" .
          docker push "$IMAGE_NAME:latest"

  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Test
        run: npm run test

  expo-build:
    runs-on: ubuntu-latest
    needs:
      - frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build mobile bundles
        env:
          EXPO_PUBLIC_API_BASE_URL: http://localhost:3000
        run: npm run build:mobile
